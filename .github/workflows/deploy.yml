name: Deploy to EC2

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create SSH directory
      run: mkdir -p ~/.ssh

    - name: Store SSH key
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private.key
        chmod 600 ~/.ssh/private.key
        cat >>~/.ssh/config <<END
        Host ec2
          HostName ${{ env.EC2_HOST }}
          User ${{ env.EC2_USERNAME }}
          IdentityFile ~/.ssh/private.key
          StrictHostKeyChecking no
        END

    - name: Create production env file
      run: |
        cat > .env.production << EOL
        DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:5432/FormBuild
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
        NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
        NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
        NODE_ENV=production
        EOL

    - name: Deploy to EC2
      run: |
        # Create app directory and copy files
        ssh -i ~/.ssh/private.key ec2 'mkdir -p ~/app'
        scp -i ~/.ssh/private.key -r ./* ec2:~/app/
        
        # SSH into EC2 and run deployment commands
        ssh -i ~/.ssh/private.key ec2 '
          cd ~/app
          
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo usermod -aG docker $USER
          fi
          
          # Install Docker Compose if not installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Setup environment files
          if [ -f .env ]; then
            mv .env .env.backup
          fi
          cp .env.production .env
          chmod 600 .env
          
          # Start Docker service if not running
          if ! systemctl is-active --quiet docker; then
            sudo systemctl start docker
          fi
          
          # Deploy with Docker
          sudo docker-compose down || true
          sudo docker-compose build --no-cache
          sudo docker-compose up -d
        ' 